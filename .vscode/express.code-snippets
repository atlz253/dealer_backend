{
	// Place your backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"express router": {
		"scope": "typescript",
		"prefix": "router",
		"body": [
			"import express, { Response } from \"express\";",
			"import RequestBody from \"../interfaces/RequestBody\";",
			"import expressAsyncHandler from \"express-async-handler\";",
			"",
			"const ${1:name}Router = express.Router();",
			"",
			"$0",
			"",
			"export default ${1:name}Router;"
		]
	},
	"get method": {
		"scope": "typescript",
		"prefix": "get",
		"body": [
			"${1:nameRouter}.get(\"${2:/}\", expressAsyncHandler(async (req: RequestBody$3, res: Response$4) => {",
			"\t$0",
			"}));$5"
		]
	},
	"post method": {
		"scope": "typescript",
		"prefix": "post",
		"body": [
			"${1:nameRouter}.post(\"${2:/}\", expressAsyncHandler(async (req: RequestBody$3, res: Response$4) => {",
			"\t$0",
			"}));$5"
		]
	},
	"put method": {
		"scope": "typescript",
		"prefix": "put",
		"body": [
			"${1:nameRouter}.put(\"${2:/}\", expressAsyncHandler(async (req: RequestBody$3, res: Response$4) => {",
			"\t$0",
			"}));$5"
		]
	},
	"delete method": {
		"scope": "typescript",
		"prefix": "delete",
		"body": [
			"${1:nameRouter}.delete(\"${2:/}\", expressAsyncHandler(async (req: RequestBody$3, res: Response$4) => {",
			"\t$0",
			"}));$5"
		]
	}
}